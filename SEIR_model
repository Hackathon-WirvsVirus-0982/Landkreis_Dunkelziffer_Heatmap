import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

#SEIR model:
#as an input it needs:
#the timespan from today to the first infected case
#the number of people living in a community
#the number of people reported infected on the first day

#Output:number of infected todays
def modelprediction(timespan,N,rep):

#Parameters taken from:
#https://towardsdatascience.com/social-distancing-to-slow-the-coronavirus-768292f04296

#this could be an alternative source
#http://gabgoh.github.io/COVID/index.html?CFR=0.02&D_hospital_lag=5&D_incbation=5.2&D_infectious=2.9&D_recovery_mild=11.1&D_recovery_severe=28.6&I0=1&InterventionAmt=0.33333333333333337&InterventionTime=107.46666666666667&P_SEVERE=0.2&R0=2.2&Time_to_death=32&logN=15.761420707019587


    beta=1.75 #transmission probability
    tau=0.2  #incubation rate 
    #rho is one as we first do not make the distinction between
    #symptomatic and asymptomatic infections
    rho=1 #probability of symptomatically infected
    mu=0.5 #removal rate

    k=[beta, tau, rho, mu]
    #setting up our deterministic ODE model 
    # function that returns dy/dt
    # in our case y is a vector with the compartments S E I WI R
    #k is our vector with the parameters

    #Implementation  with symptomatic and asymptomatic
    #but probably for our case we do not need it, then set parameter rho==1
    #we decided to ru
    def model(y,t,k):
        s=y[0]
        ep=y[1]
        i=y[2]
        wi=y[3]
        r=y[4]
        dsdt = -k[0]*s*i
        depdt = k[0]*s*i-k[1]*ep
        didt = k[1]*k[2]*ep-k[3]*i
        dwidt =k[1]*(1-k[2])*ep-k[3]*wi
        drdt =k[3]*wi+k[3]*i
        dydt = [dsdt, depdt, didt, dwidt, drdt]
        return dydt

    # initial condition
    #we classify the infected as exposed and calculate back in time

    y0=[1-rep/N,rep/N,0,0,0]


    #Here we will determine for how long we need to let the model run
    #Duration between today and first infection
    #we can just assume in average 8 days the first was an exposed
    #this assumption realys on a testing time from 5-6 days and 
    #an incubation time from 5-6 days
    timecorrection=8
    timespancorr=timespan+timecorrection

    #beginning of the time point
    t = np.linspace(0,timespancorr)

    # solve ODEs
    y=odeint(model,y0,t,args=(k,))

    #now we calculate the number of infected at the day today.
    numbinf=round((y[-1][2]+y[-1][3])*N) #we have to round the number of people, since there are no uneven people
    return numbinf,y,t;
